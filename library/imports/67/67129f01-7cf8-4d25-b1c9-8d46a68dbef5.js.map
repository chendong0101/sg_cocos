{"version":3,"sources":["assets\\scripts\\arrow\\ArrowGame.js"],"names":["cc","Class","Component","properties","starPrefab","type","Prefab","batPrefab","snowmanPrefab","groundHeight","scene","Node","playerPrefab","controllerPrefab","scoreDisplay","Label","scoreAudio","AudioClip","successUIPrefab","failedUIPrefab","totalTime","onLoad","gameStatus","monsterCount","userDataStr","sys","localStorage","getItem","log","userData","coin","level","JSON","parse","manager","director","getCollisionManager","enabled","enabledDebugDraw","enabledDrawBoundingBox","score","children","i","length","getComponent","game","initScoreDisplayLable","initPlayer","initController","player","instantiate","node","addChild","name","controller","spawnNewMonster","pos","prefab","newMonster","setPosition","spawnNewStar","count","step","Math","PI","newStar","starPos","v2","x","sin","y","cos","vDown","addScore","string","audioEngine","playEffect","onGameEnd","destroy","setItem","stringify","onGameSuccess","ui","onGameFailed","onGameStart","loadScene","onStart","update","dt","random"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAA,EAAE,CAACC,KAAH,CAAS;AACL,aAASD,EAAE,CAACE,SADP;AAGLC,EAAAA,UAAU,EAAE;AACRC,IAAAA,UAAU,EAAE;AACR,iBAAS,IADD;AAERC,MAAAA,IAAI,EAAEL,EAAE,CAACM;AAFD,KADJ;AAKRC,IAAAA,SAAS,EAAE;AACP,iBAAS,IADF;AAEPF,MAAAA,IAAI,EAAEL,EAAE,CAACM;AAFF,KALH;AASRE,IAAAA,aAAa,EAAE;AACX,iBAAS,IADE;AAEXH,MAAAA,IAAI,EAAEL,EAAE,CAACM;AAFE,KATP;AAaRG,IAAAA,YAAY,EAAE,CAbN;AAcRC,IAAAA,KAAK,EAAE;AACH,iBAAS,IADN;AAEHL,MAAAA,IAAI,EAAEL,EAAE,CAACW;AAFN,KAdC;AAkBRC,IAAAA,YAAY,EAAE;AACV,iBAAS,IADC;AAEVP,MAAAA,IAAI,EAAEL,EAAE,CAACM;AAFC,KAlBN;AAsBRO,IAAAA,gBAAgB,EAAE;AACd,iBAAS,IADK;AAEdR,MAAAA,IAAI,EAAEL,EAAE,CAACM;AAFK,KAtBV;AA0BRQ,IAAAA,YAAY,EAAE;AACV,iBAAS,IADC;AAEVT,MAAAA,IAAI,EAAEL,EAAE,CAACe;AAFC,KA1BN;AA8BRC,IAAAA,UAAU,EAAE;AACR,iBAAS,IADD;AAERX,MAAAA,IAAI,EAAEL,EAAE,CAACiB;AAFD,KA9BJ;AAkCRC,IAAAA,eAAe,EAAE;AACb,iBAAS,IADI;AAEbb,MAAAA,IAAI,EAAEL,EAAE,CAACM;AAFI,KAlCT;AAsCRa,IAAAA,cAAc,EAAE;AACZ,iBAAS,IADG;AAEZd,MAAAA,IAAI,EAAEL,EAAE,CAACM;AAFG,KAtCR;AA0CRc,IAAAA,SAAS,EAAE;AA1CH,GAHP;AAgDLC,EAAAA,MAhDK,oBAgDK;AACN,SAAKC,UAAL,GAAkB,SAAlB;AACA,SAAKC,YAAL,GAAoB,CAApB;AACA,QAAIC,WAAW,GAAGxB,EAAE,CAACyB,GAAH,CAAOC,YAAP,CAAoBC,OAApB,CAA4B,MAA5B,CAAlB;AACA3B,IAAAA,EAAE,CAAC4B,GAAH,CAAOJ,WAAP;;AACA,QAAI,CAACA,WAAL,EAAkB;AACd,WAAKK,QAAL,GAAgB;AACZC,QAAAA,IAAI,EAAE,CADM;AAEZC,QAAAA,KAAK,EAAE;AAFK,OAAhB;AAIA/B,MAAAA,EAAE,CAAC4B,GAAH,CAAO,KAAKC,QAAZ;AACH,KAND,MAMO;AACH,WAAKA,QAAL,GAAgBG,IAAI,CAACC,KAAL,CAAWT,WAAX,CAAhB;AACH;;AACD,QAAIU,OAAO,GAAGlC,EAAE,CAACmC,QAAH,CAAYC,mBAAZ,EAAd;AACAF,IAAAA,OAAO,CAACG,OAAR,GAAkB,IAAlB;AACAH,IAAAA,OAAO,CAACI,gBAAR,GAA2B,IAA3B;AACAJ,IAAAA,OAAO,CAACK,sBAAR,GAAiC,IAAjC;AACA,SAAKC,KAAL,GAAa,CAAb;AACA,QAAIC,QAAQ,GAAG,KAAK/B,KAAL,CAAW+B,QAA1B;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAAQ,CAACE,MAA7B,EAAqC,EAAED,CAAvC,EAA0C;AACtC,UAAID,QAAQ,CAACC,CAAD,CAAR,CAAYE,YAAZ,CAAyB,cAAzB,CAAJ,EAA8C;AAC1CH,QAAAA,QAAQ,CAACC,CAAD,CAAR,CAAYE,YAAZ,CAAyB,cAAzB,EAAyCC,IAAzC,GAAgD,IAAhD;AACH;AACJ;;AAED,SAAKC,qBAAL;AACA,SAAKC,UAAL;AACA,SAAKC,cAAL;AACH,GA7EI;AA+ELF,EAAAA,qBA/EK,mCA+EmB,CACpB;AACA;AACH,GAlFI;AAoFLC,EAAAA,UApFK,wBAoFS;AACV,SAAKE,MAAL,GAAcjD,EAAE,CAACkD,WAAH,CAAe,KAAKtC,YAApB,CAAd;AACA,SAAKuC,IAAL,CAAUC,QAAV,CAAmB,KAAKH,MAAxB,EAAgC,CAAhC;AACA,SAAKA,MAAL,CAAYI,IAAZ,GAAmB,QAAnB;AACA,SAAKJ,MAAL,CAAYL,YAAZ,CAAyB,aAAzB,EAAwClC,KAAxC,GAAgD,KAAKA,KAArD;AACA,SAAKuC,MAAL,CAAYL,YAAZ,CAAyB,aAAzB,EAAwCC,IAAxC,GAA+C,IAA/C;AACA,SAAKI,MAAL,CAAYL,YAAZ,CAAyB,cAAzB,EAAyCC,IAAzC,GAAgD,IAAhD;AACH,GA3FI;AA6FLG,EAAAA,cA7FK,4BA6Fa;AACd,SAAKM,UAAL,GAAkBtD,EAAE,CAACkD,WAAH,CAAe,KAAKrC,gBAApB,CAAlB;AACA,SAAKsC,IAAL,CAAUC,QAAV,CAAmB,KAAKE,UAAxB,EAAoC,CAApC;AACA,QAAIb,QAAQ,GAAG,KAAKa,UAAL,CAAgBb,QAA/B;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAAQ,CAACE,MAA7B,EAAqC,EAAED,CAAvC,EAA0C;AACtC,UAAID,QAAQ,CAACC,CAAD,CAAR,CAAYE,YAAZ,CAAyB,YAAzB,CAAJ,EAA4C;AACxCH,QAAAA,QAAQ,CAACC,CAAD,CAAR,CAAYE,YAAZ,CAAyB,YAAzB,EAAuCK,MAAvC,GAAgD,KAAKA,MAArD;AACH;AACJ;AACJ,GAtGI;AAwGLM,EAAAA,eAxGK,2BAwGYC,GAxGZ,EAwGiBC,MAxGjB,EAwGyB;AAC1B,QAAIC,UAAU,GAAG1D,EAAE,CAACkD,WAAH,CAAeO,MAAf,CAAjB;AACAC,IAAAA,UAAU,CAACd,YAAX,CAAwB,cAAxB,EAAwCC,IAAxC,GAA+C,IAA/C;AACA,SAAKM,IAAL,CAAUC,QAAV,CAAmBM,UAAnB,EAA+B,CAA/B;AACAA,IAAAA,UAAU,CAACC,WAAX,CAAuBH,GAAvB;AACA,SAAKjC,YAAL;AACH,GA9GI;AAgHLqC,EAAAA,YAhHK,wBAgHQJ,GAhHR,EAgHaK,KAhHb,EAgHoB;AACrB,SAAKtC,YAAL;AACA,QAAIuC,IAAI,GAAG,IAAIC,IAAI,CAACC,EAAT,GAAcH,KAAzB;;AACA,SAAK,IAAInB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmB,KAApB,EAA2BnB,CAAC,EAA5B,EAAgC;AAC5B,UAAIuB,OAAO,GAAGjE,EAAE,CAACkD,WAAH,CAAe,KAAK9C,UAApB,CAAd;AACA,WAAKM,KAAL,CAAW0C,QAAX,CAAoBa,OAApB,EAA6B,CAA7B;AACA,UAAIC,OAAO,GAAGlE,EAAE,CAACmE,EAAH,CAAMX,GAAG,CAACY,CAAJ,GAAQ,KAAKL,IAAI,CAACM,GAAL,CAAS3B,CAAC,GAAGoB,IAAb,CAAnB,EAAuCN,GAAG,CAACc,CAAJ,GAAQ,KAAKP,IAAI,CAACQ,GAAL,CAAS7B,CAAC,GAAGoB,IAAb,CAApD,CAAd;AACAG,MAAAA,OAAO,CAACN,WAAR,CAAoBO,OAApB;AACAD,MAAAA,OAAO,CAACrB,YAAR,CAAqB,MAArB,EAA6BC,IAA7B,GAAoC,IAApC;AACAoB,MAAAA,OAAO,CAACrB,YAAR,CAAqB,MAArB,EAA6B4B,KAA7B,GAAqC,GAArC;AACH;AACJ,GA3HI;AA6HLC,EAAAA,QA7HK,oBA6HI/B,CA7HJ,EA6HO;AACR,QAAI,KAAKF,KAAL,KAAe,GAAnB,EAAwB;AACpB;AACH;;AACD,SAAKA,KAAL,GAAaE,CAAC,GAAG,KAAKF,KAAtB;AACA,SAAK1B,YAAL,CAAkB4D,MAAlB,GAA2B,SAAS,KAAKlC,KAAzC;AACAxC,IAAAA,EAAE,CAAC2E,WAAH,CAAeC,UAAf,CAA0B,KAAK5D,UAA/B,EAA2C,KAA3C;AACH,GApII;AAsIL6D,EAAAA,SAtIK,uBAsIO;AACR,SAAKvD,UAAL,GAAkB,KAAlB;AACA,SAAK2B,MAAL,CAAY6B,OAAZ;AACA,SAAKhE,YAAL,CAAkBgE,OAAlB;AACA9E,IAAAA,EAAE,CAAC4B,GAAH,CAAO,KAAKC,QAAZ;AACA,SAAKA,QAAL,CAAcC,IAAd,IAAsB,KAAKU,KAA3B;AACAxC,IAAAA,EAAE,CAACyB,GAAH,CAAOC,YAAP,CAAoBqD,OAApB,CAA4B,MAA5B,EAAoC/C,IAAI,CAACgD,SAAL,CAAe,KAAKnD,QAApB,CAApC;AACA,QAAIL,WAAW,GAAGxB,EAAE,CAACyB,GAAH,CAAOC,YAAP,CAAoBC,OAApB,CAA4B,MAA5B,CAAlB;AACA3B,IAAAA,EAAE,CAAC4B,GAAH,CAAO,sBAAsBJ,WAA7B;AACH,GA/II;AAiJLyD,EAAAA,aAjJK,2BAiJY;AACb,QAAIC,EAAE,GAAGlF,EAAE,CAACkD,WAAH,CAAe,KAAKhC,eAApB,CAAT;AACA,SAAKiC,IAAL,CAAUC,QAAV,CAAmB8B,EAAnB,EAAuB,CAAvB;AACA,SAAKrD,QAAL,CAAcE,KAAd;AACA,SAAK8C,SAAL;AACH,GAtJI;AAwJLM,EAAAA,YAxJK,0BAwJW;AACZ,QAAID,EAAE,GAAGlF,EAAE,CAACkD,WAAH,CAAe,KAAK/B,cAApB,CAAT;AACA,SAAKgC,IAAL,CAAUC,QAAV,CAAmB8B,EAAnB,EAAuB,CAAvB;AACA,SAAKL,SAAL;AACH,GA5JI;AA8JLO,EAAAA,WAAW,EAAE,uBAAW;AACpBpF,IAAAA,EAAE,CAACmC,QAAH,CAAYkD,SAAZ,CAAsB,MAAtB;AACA,SAAKpC,MAAL,CAAYqC,OAAZ;AACH,GAjKI;AAmKLC,EAAAA,MAnKK,kBAmKEC,EAnKF,EAmKM;AACP,SAAKpE,SAAL,IAAkBoE,EAAlB;;AACA,QAAI,KAAKpE,SAAL,GAAiB,GAArB,EAA0B;AACtB,WAAK,IAAIsB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,YAAIc,GAAG,GAAGxD,EAAE,CAACmE,EAAH,CAAMJ,IAAI,CAAC0B,MAAL,KAAgB,GAAtB,EAA2B,GAA3B,CAAV;AACA,aAAKlC,eAAL,CAAqBC,GAArB,EAA0B,KAAKjD,SAA/B;AACH;;AACD,WAAK,IAAImC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxB,YAAIc,GAAG,GAAGxD,EAAE,CAACmE,EAAH,CAAMJ,IAAI,CAAC0B,MAAL,KAAgB,GAAtB,EAA2B,CAAC,GAA5B,CAAV;AACA,aAAKlC,eAAL,CAAqBC,GAArB,EAA0B,KAAKhD,aAA/B;AACH;AACJ;;AACD,QAAI,KAAKe,YAAL,KAAsB,CAAtB,IAA2B,KAAKD,UAAL,KAAoB,SAAnD,EAA8D;AAC1D,WAAK2D,aAAL;AACH;AACJ;AAlLI,CAAT","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://docs.cocos2d-x.org/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] https://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        starPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        batPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        snowmanPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        groundHeight: 0, \n        scene: {\n            default: null,\n            type: cc.Node\n        },\n        playerPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        controllerPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        scoreDisplay: {\n            default: null,\n            type: cc.Label\n        },\n        scoreAudio: {\n            default: null,\n            type: cc.AudioClip\n        },\n        successUIPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        failedUIPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        totalTime: 0,\n    },\n\n    onLoad () {\n        this.gameStatus = 'playing';\n        this.monsterCount = 0;\n        var userDataStr = cc.sys.localStorage.getItem(\"data\");\n        cc.log(userDataStr);\n        if (!userDataStr) {\n            this.userData = {\n                coin: 0,\n                level: 0,\n            };\n            cc.log(this.userData);\n        } else {\n            this.userData = JSON.parse(userDataStr);\n        }\n        var manager = cc.director.getCollisionManager();\n        manager.enabled = true;\n        manager.enabledDebugDraw = true;\n        manager.enabledDrawBoundingBox = true;\n        this.score = 0;\n        var children = this.scene.children;\n        for (var i = 0; i < children.length; ++i) {\n            if (children[i].getComponent(\"LivingObject\")) {\n                children[i].getComponent(\"LivingObject\").game = this;\n            }\n        }\n\n        this.initScoreDisplayLable();\n        this.initPlayer();\n        this.initController();\n    },\n\n    initScoreDisplayLable() {\n        // this.scoreDisplay = cc.instantiate(this.scorePrefab);\n        // this.node.addChild(this.scoreDisplay, 2);\n    },\n\n    initPlayer () {\n        this.player = cc.instantiate(this.playerPrefab);\n        this.node.addChild(this.player, 1);\n        this.player.name = \"player\";\n        this.player.getComponent(\"ArrowPlayer\").scene = this.scene;\n        this.player.getComponent(\"ArrowPlayer\").game = this;\n        this.player.getComponent(\"LivingObject\").game = this;\n    },\n\n    initController () {\n        this.controller = cc.instantiate(this.controllerPrefab);\n        this.node.addChild(this.controller, 2);\n        var children = this.controller.children;\n        for (var i = 0; i < children.length; ++i) {\n            if (children[i].getComponent(\"Controller\")) {\n                children[i].getComponent(\"Controller\").player = this.player;\n            }\n        }\n    },\n\n    spawnNewMonster (pos, prefab) {\n        var newMonster = cc.instantiate(prefab);\n        newMonster.getComponent('LivingObject').game = this;\n        this.node.addChild(newMonster, 1);\n        newMonster.setPosition(pos);\n        this.monsterCount++;\n    },\n\n    spawnNewStar(pos, count) {\n        this.monsterCount--;\n        var step = 2 * Math.PI / count;\n        for (var i = 0; i < count; i++) {\n            var newStar = cc.instantiate(this.starPrefab);\n            this.scene.addChild(newStar, 1);\n            var starPos = cc.v2(pos.x + 90 * Math.sin(i * step), pos.y + 90 * Math.cos(i * step));\n            newStar.setPosition(starPos);\n            newStar.getComponent('Star').game = this;\n            newStar.getComponent('Star').vDown = 300;\n        }\n    },\n\n    addScore(i) {\n        if (this.score === 100) {\n            return;\n        }\n        this.score = i + this.score;\n        this.scoreDisplay.string = '金币: ' + this.score;\n        cc.audioEngine.playEffect(this.scoreAudio, false);\n    },\n\n    onGameEnd() {\n        this.gameStatus = 'end';\n        this.player.destroy();\n        this.scoreDisplay.destroy();\n        cc.log(this.userData);\n        this.userData.coin += this.score;\n        cc.sys.localStorage.setItem(\"data\", JSON.stringify(this.userData));\n        var userDataStr = cc.sys.localStorage.getItem(\"data\");\n        cc.log(\"data in storage: \" + userDataStr);\n    },\n\n    onGameSuccess () {\n        var ui = cc.instantiate(this.successUIPrefab);\n        this.node.addChild(ui, 0);\n        this.userData.level++;\n        this.onGameEnd();\n    },\n\n    onGameFailed () {\n        var ui = cc.instantiate(this.failedUIPrefab);\n        this.node.addChild(ui, 0);\n        this.onGameEnd();\n    },\n    \n    onGameStart: function() {\n        cc.director.loadScene('game');\n        this.player.onStart();\n    },\n\n    update(dt) {\n        this.totalTime += dt;\n        if (this.totalTime < 0.1) {\n            for (var i = 0; i < 0; i++) {\n                var pos = cc.v2(Math.random() * 500, 220);\n                this.spawnNewMonster(pos, this.batPrefab);\n            }\n            for (var i = 0; i < 1; i++) {\n                var pos = cc.v2(Math.random() * 500, -180);\n                this.spawnNewMonster(pos, this.snowmanPrefab);\n            }\n        }\n        if (this.monsterCount === 0 && this.gameStatus === 'playing') {\n            this.onGameSuccess();\n        }\n    },\n});\n"]}